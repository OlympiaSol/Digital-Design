// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/29/2021 17:33:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MultiplierP
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MultiplierP_vlg_sample_tst(
	A_IN,
	B_IN,
	CLK,
	RST,
	SI,
	sampler_tx
);
input [7:0] A_IN;
input [7:0] B_IN;
input  CLK;
input  RST;
input  SI;
output sampler_tx;

reg sample;
time current_time;
always @(A_IN or B_IN or CLK or RST or SI)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MultiplierP_vlg_check_tst (
	A_OUT,
	B_OUT,
	H_OUT,
	L_OUT,
	sampler_rx
);
input [7:0] A_OUT;
input [7:0] B_OUT;
input [7:0] H_OUT;
input [7:0] L_OUT;
input sampler_rx;

reg [7:0] A_OUT_expected;
reg [7:0] B_OUT_expected;
reg [7:0] H_OUT_expected;
reg [7:0] L_OUT_expected;

reg [7:0] A_OUT_prev;
reg [7:0] B_OUT_prev;
reg [7:0] H_OUT_prev;
reg [7:0] L_OUT_prev;

reg [7:0] A_OUT_expected_prev;
reg [7:0] B_OUT_expected_prev;
reg [7:0] H_OUT_expected_prev;
reg [7:0] L_OUT_expected_prev;

reg [7:0] last_A_OUT_exp;
reg [7:0] last_B_OUT_exp;
reg [7:0] last_H_OUT_exp;
reg [7:0] last_L_OUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_OUT_prev = A_OUT;
	B_OUT_prev = B_OUT;
	H_OUT_prev = H_OUT;
	L_OUT_prev = L_OUT;
end

// update expected /o prevs

always @(trigger)
begin
	A_OUT_expected_prev = A_OUT_expected;
	B_OUT_expected_prev = B_OUT_expected;
	H_OUT_expected_prev = H_OUT_expected;
	L_OUT_expected_prev = L_OUT_expected;
end



// expected A_OUT[3]
initial
begin
	A_OUT_expected[3] = 1'bX;
end 

// expected A_OUT[2]
initial
begin
	A_OUT_expected[2] = 1'bX;
end 

// expected A_OUT[1]
initial
begin
	A_OUT_expected[1] = 1'bX;
end 

// expected A_OUT[0]
initial
begin
	A_OUT_expected[0] = 1'bX;
end 

// expected B_OUT[3]
initial
begin
	B_OUT_expected[3] = 1'bX;
end 

// expected B_OUT[2]
initial
begin
	B_OUT_expected[2] = 1'bX;
end 

// expected B_OUT[1]
initial
begin
	B_OUT_expected[1] = 1'bX;
end 

// expected B_OUT[0]
initial
begin
	B_OUT_expected[0] = 1'bX;
end 

// expected H_OUT[3]
initial
begin
	H_OUT_expected[3] = 1'bX;
end 

// expected H_OUT[2]
initial
begin
	H_OUT_expected[2] = 1'bX;
end 

// expected H_OUT[1]
initial
begin
	H_OUT_expected[1] = 1'bX;
end 

// expected H_OUT[0]
initial
begin
	H_OUT_expected[0] = 1'bX;
end 

// expected L_OUT[3]
initial
begin
	L_OUT_expected[3] = 1'bX;
end 

// expected L_OUT[2]
initial
begin
	L_OUT_expected[2] = 1'bX;
end 

// expected L_OUT[1]
initial
begin
	L_OUT_expected[1] = 1'bX;
end 

// expected L_OUT[0]
initial
begin
	L_OUT_expected[0] = 1'bX;
end 
// generate trigger
always @(A_OUT_expected or A_OUT or B_OUT_expected or B_OUT or H_OUT_expected or H_OUT or L_OUT_expected or L_OUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A_OUT = %b | expected B_OUT = %b | expected H_OUT = %b | expected L_OUT = %b | ",A_OUT_expected_prev,B_OUT_expected_prev,H_OUT_expected_prev,L_OUT_expected_prev);
	$display("| real A_OUT = %b | real B_OUT = %b | real H_OUT = %b | real L_OUT = %b | ",A_OUT_prev,B_OUT_prev,H_OUT_prev,L_OUT_prev);
`endif
	if (
		( A_OUT_expected_prev[0] !== 1'bx ) && ( A_OUT_prev[0] !== A_OUT_expected_prev[0] )
		&& ((A_OUT_expected_prev[0] !== last_A_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[0] = A_OUT_expected_prev[0];
	end
	if (
		( A_OUT_expected_prev[1] !== 1'bx ) && ( A_OUT_prev[1] !== A_OUT_expected_prev[1] )
		&& ((A_OUT_expected_prev[1] !== last_A_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[1] = A_OUT_expected_prev[1];
	end
	if (
		( A_OUT_expected_prev[2] !== 1'bx ) && ( A_OUT_prev[2] !== A_OUT_expected_prev[2] )
		&& ((A_OUT_expected_prev[2] !== last_A_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[2] = A_OUT_expected_prev[2];
	end
	if (
		( A_OUT_expected_prev[3] !== 1'bx ) && ( A_OUT_prev[3] !== A_OUT_expected_prev[3] )
		&& ((A_OUT_expected_prev[3] !== last_A_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[3] = A_OUT_expected_prev[3];
	end
	if (
		( A_OUT_expected_prev[4] !== 1'bx ) && ( A_OUT_prev[4] !== A_OUT_expected_prev[4] )
		&& ((A_OUT_expected_prev[4] !== last_A_OUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[4] = A_OUT_expected_prev[4];
	end
	if (
		( A_OUT_expected_prev[5] !== 1'bx ) && ( A_OUT_prev[5] !== A_OUT_expected_prev[5] )
		&& ((A_OUT_expected_prev[5] !== last_A_OUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[5] = A_OUT_expected_prev[5];
	end
	if (
		( A_OUT_expected_prev[6] !== 1'bx ) && ( A_OUT_prev[6] !== A_OUT_expected_prev[6] )
		&& ((A_OUT_expected_prev[6] !== last_A_OUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[6] = A_OUT_expected_prev[6];
	end
	if (
		( A_OUT_expected_prev[7] !== 1'bx ) && ( A_OUT_prev[7] !== A_OUT_expected_prev[7] )
		&& ((A_OUT_expected_prev[7] !== last_A_OUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_OUT_expected_prev);
		$display ("     Real value = %b", A_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_OUT_exp[7] = A_OUT_expected_prev[7];
	end
	if (
		( B_OUT_expected_prev[0] !== 1'bx ) && ( B_OUT_prev[0] !== B_OUT_expected_prev[0] )
		&& ((B_OUT_expected_prev[0] !== last_B_OUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_OUT_expected_prev);
		$display ("     Real value = %b", B_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_OUT_exp[0] = B_OUT_expected_prev[0];
	end
	if (
		( B_OUT_expected_prev[1] !== 1'bx ) && ( B_OUT_prev[1] !== B_OUT_expected_prev[1] )
		&& ((B_OUT_expected_prev[1] !== last_B_OUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_OUT_expected_prev);
		$display ("     Real value = %b", B_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_OUT_exp[1] = B_OUT_expected_prev[1];
	end
	if (
		( B_OUT_expected_prev[2] !== 1'bx ) && ( B_OUT_prev[2] !== B_OUT_expected_prev[2] )
		&& ((B_OUT_expected_prev[2] !== last_B_OUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_OUT_expected_prev);
		$display ("     Real value = %b", B_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_OUT_exp[2] = B_OUT_expected_prev[2];
	end
	if (
		( B_OUT_expected_prev[3] !== 1'bx ) && ( B_OUT_prev[3] !== B_OUT_expected_prev[3] )
		&& ((B_OUT_expected_prev[3] !== last_B_OUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_OUT_expected_prev);
		$display ("     Real value = %b", B_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_OUT_exp[3] = B_OUT_expected_prev[3];
	end
	if (
		( B_OUT_expected_prev[4] !== 1'bx ) && ( B_OUT_prev[4] !== B_OUT_expected_prev[4] )
		&& ((B_OUT_expected_prev[4] !== last_B_OUT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_OUT_expected_prev);
		$display ("     Real value = %b", B_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_OUT_exp[4] = B_OUT_expected_prev[4];
	end
	if (
		( B_OUT_expected_prev[5] !== 1'bx ) && ( B_OUT_prev[5] !== B_OUT_expected_prev[5] )
		&& ((B_OUT_expected_prev[5] !== last_B_OUT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_OUT_expected_prev);
		$display ("     Real value = %b", B_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_OUT_exp[5] = B_OUT_expected_prev[5];
	end
	if (
		( B_OUT_expected_prev[6] !== 1'bx ) && ( B_OUT_prev[6] !== B_OUT_expected_prev[6] )
		&& ((B_OUT_expected_prev[6] !== last_B_OUT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_OUT_expected_prev);
		$display ("     Real value = %b", B_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_OUT_exp[6] = B_OUT_expected_prev[6];
	end
	if (
		( B_OUT_expected_prev[7] !== 1'bx ) && ( B_OUT_prev[7] !== B_OUT_expected_prev[7] )
		&& ((B_OUT_expected_prev[7] !== last_B_OUT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_OUT_expected_prev);
		$display ("     Real value = %b", B_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_OUT_exp[7] = B_OUT_expected_prev[7];
	end
	if (
		( H_OUT_expected_prev[0] !== 1'bx ) && ( H_OUT_prev[0] !== H_OUT_expected_prev[0] )
		&& ((H_OUT_expected_prev[0] !== last_H_OUT_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H_OUT_exp[0] = H_OUT_expected_prev[0];
	end
	if (
		( H_OUT_expected_prev[1] !== 1'bx ) && ( H_OUT_prev[1] !== H_OUT_expected_prev[1] )
		&& ((H_OUT_expected_prev[1] !== last_H_OUT_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H_OUT_exp[1] = H_OUT_expected_prev[1];
	end
	if (
		( H_OUT_expected_prev[2] !== 1'bx ) && ( H_OUT_prev[2] !== H_OUT_expected_prev[2] )
		&& ((H_OUT_expected_prev[2] !== last_H_OUT_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H_OUT_exp[2] = H_OUT_expected_prev[2];
	end
	if (
		( H_OUT_expected_prev[3] !== 1'bx ) && ( H_OUT_prev[3] !== H_OUT_expected_prev[3] )
		&& ((H_OUT_expected_prev[3] !== last_H_OUT_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H_OUT_exp[3] = H_OUT_expected_prev[3];
	end
	if (
		( H_OUT_expected_prev[4] !== 1'bx ) && ( H_OUT_prev[4] !== H_OUT_expected_prev[4] )
		&& ((H_OUT_expected_prev[4] !== last_H_OUT_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H_OUT_exp[4] = H_OUT_expected_prev[4];
	end
	if (
		( H_OUT_expected_prev[5] !== 1'bx ) && ( H_OUT_prev[5] !== H_OUT_expected_prev[5] )
		&& ((H_OUT_expected_prev[5] !== last_H_OUT_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H_OUT_exp[5] = H_OUT_expected_prev[5];
	end
	if (
		( H_OUT_expected_prev[6] !== 1'bx ) && ( H_OUT_prev[6] !== H_OUT_expected_prev[6] )
		&& ((H_OUT_expected_prev[6] !== last_H_OUT_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H_OUT_exp[6] = H_OUT_expected_prev[6];
	end
	if (
		( H_OUT_expected_prev[7] !== 1'bx ) && ( H_OUT_prev[7] !== H_OUT_expected_prev[7] )
		&& ((H_OUT_expected_prev[7] !== last_H_OUT_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port H_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", H_OUT_expected_prev);
		$display ("     Real value = %b", H_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_H_OUT_exp[7] = H_OUT_expected_prev[7];
	end
	if (
		( L_OUT_expected_prev[0] !== 1'bx ) && ( L_OUT_prev[0] !== L_OUT_expected_prev[0] )
		&& ((L_OUT_expected_prev[0] !== last_L_OUT_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_OUT_expected_prev);
		$display ("     Real value = %b", L_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_L_OUT_exp[0] = L_OUT_expected_prev[0];
	end
	if (
		( L_OUT_expected_prev[1] !== 1'bx ) && ( L_OUT_prev[1] !== L_OUT_expected_prev[1] )
		&& ((L_OUT_expected_prev[1] !== last_L_OUT_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_OUT_expected_prev);
		$display ("     Real value = %b", L_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_L_OUT_exp[1] = L_OUT_expected_prev[1];
	end
	if (
		( L_OUT_expected_prev[2] !== 1'bx ) && ( L_OUT_prev[2] !== L_OUT_expected_prev[2] )
		&& ((L_OUT_expected_prev[2] !== last_L_OUT_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_OUT_expected_prev);
		$display ("     Real value = %b", L_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_L_OUT_exp[2] = L_OUT_expected_prev[2];
	end
	if (
		( L_OUT_expected_prev[3] !== 1'bx ) && ( L_OUT_prev[3] !== L_OUT_expected_prev[3] )
		&& ((L_OUT_expected_prev[3] !== last_L_OUT_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_OUT_expected_prev);
		$display ("     Real value = %b", L_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_L_OUT_exp[3] = L_OUT_expected_prev[3];
	end
	if (
		( L_OUT_expected_prev[4] !== 1'bx ) && ( L_OUT_prev[4] !== L_OUT_expected_prev[4] )
		&& ((L_OUT_expected_prev[4] !== last_L_OUT_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_OUT_expected_prev);
		$display ("     Real value = %b", L_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_L_OUT_exp[4] = L_OUT_expected_prev[4];
	end
	if (
		( L_OUT_expected_prev[5] !== 1'bx ) && ( L_OUT_prev[5] !== L_OUT_expected_prev[5] )
		&& ((L_OUT_expected_prev[5] !== last_L_OUT_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_OUT_expected_prev);
		$display ("     Real value = %b", L_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_L_OUT_exp[5] = L_OUT_expected_prev[5];
	end
	if (
		( L_OUT_expected_prev[6] !== 1'bx ) && ( L_OUT_prev[6] !== L_OUT_expected_prev[6] )
		&& ((L_OUT_expected_prev[6] !== last_L_OUT_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_OUT_expected_prev);
		$display ("     Real value = %b", L_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_L_OUT_exp[6] = L_OUT_expected_prev[6];
	end
	if (
		( L_OUT_expected_prev[7] !== 1'bx ) && ( L_OUT_prev[7] !== L_OUT_expected_prev[7] )
		&& ((L_OUT_expected_prev[7] !== last_L_OUT_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_OUT_expected_prev);
		$display ("     Real value = %b", L_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_L_OUT_exp[7] = L_OUT_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module MultiplierP_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A_IN;
reg [7:0] B_IN;
reg CLK;
reg RST;
reg SI;
// wires                                               
wire [7:0] A_OUT;
wire [7:0] B_OUT;
wire [7:0] H_OUT;
wire [7:0] L_OUT;

wire sampler;                             

// assign statements (if any)                          
MultiplierP i1 (
// port map - connection between master ports and signals/registers   
	.A_IN(A_IN),
	.A_OUT(A_OUT),
	.B_IN(B_IN),
	.B_OUT(B_OUT),
	.CLK(CLK),
	.H_OUT(H_OUT),
	.L_OUT(L_OUT),
	.RST(RST),
	.SI(SI)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #20000 1'b1;
	#20000;
end 

// RST
initial
begin
	RST = 1'b1;
	RST = #10000 1'b0;
end 

// A_IN[3]
initial
begin
	A_IN[3] = 1'b1;
end 

// A_IN[2]
initial
begin
	A_IN[2] = 1'b0;
end 

// A_IN[1]
initial
begin
	A_IN[1] = 1'b1;
end 

// A_IN[0]
initial
begin
	A_IN[0] = 1'b0;
end 

// B_IN[3]
initial
begin
	B_IN[3] = 1'b1;
end 

// B_IN[2]
initial
begin
	B_IN[2] = 1'b1;
end 

// B_IN[1]
initial
begin
	B_IN[1] = 1'b0;
end 

// B_IN[0]
initial
begin
	B_IN[0] = 1'b0;
end 

MultiplierP_vlg_sample_tst tb_sample (
	.A_IN(A_IN),
	.B_IN(B_IN),
	.CLK(CLK),
	.RST(RST),
	.SI(SI),
	.sampler_tx(sampler)
);

MultiplierP_vlg_check_tst tb_out(
	.A_OUT(A_OUT),
	.B_OUT(B_OUT),
	.H_OUT(H_OUT),
	.L_OUT(L_OUT),
	.sampler_rx(sampler)
);
endmodule

